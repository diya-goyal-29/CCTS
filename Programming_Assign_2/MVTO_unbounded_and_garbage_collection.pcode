std::set live_set;
std::shared_mutex global_lock;
std::atomic<int> counter{0};

class data_head{
    data_item* next;
    std::mutex lock;
};

class data_item{
    data_item* next = NULL;
    int value = 0;
    int id;
    std::vector<int> read_list;
};

class transaction{
    int id;
    map <pair<data_head*,data_item*>, int> local_read_set;
    map <data_head*, int> local_write_set;
};

transaction* begin(){
    global_lock.lock_shared();
    transaction* t = new transaction();
    t->id = counter.fetch_add(1); //atomic counter
    live_set.insert(t->id);
    global_lock.unlock();
    return t;
}

int read(transaction* t, data_head *x){
    global_lock.lock_shared();
    x->lock.lock();
    data_item* cur = x->next;
    data_item* previous = cur;
    while(cur->id < t->id){
        previous = cur;
        cur = cur->next;
    }
    int value = previous->value;
    t->local_read_set[{x , previous}] = value;
    previous->read_list.push_back(t->id);
    x->lock.unlock();
    global_lock.unlock();
    return value;
}

void write(transaction* t, data_head* x, int value){
    t->local_write_set[x] = value;
}

char tryCommit(transaction* t){
    global_lock.lock_shared();
    flag = 1;
    for(map<data_head*, value>::iterator it=local_write_set.begin(); it!=local_write_set.end(); ++it) {
        it.first.lock.lock();
        data_item* cur = it.first->next;
        while(cur->id < t->id) {
            for(auto i : cur->read_list){
                if(i > t->id){
                    flag = 0;
                    break;
                }
            }
            cur = cur->next;
        }
    }
    if(flag){
        for(map<data_head*, value>::iterator it=local_write_set.begin(); it!=local_write_set.end(); ++it){
            cur = it.first->next;
            while(cur->next != NULL){
                cur = cur->next;
            }
            data_item *data = new data_item();
            cur->next = data;
            data.value = it.second;
            data.id = t->id;
            it.first.lock.unlock();
        }
        live_set.erase(t->id);
        delete t;
        global_lock.unlock();
        return 'c';
    }
    else {
        for(map<pair<data_head*, data_item*>, value>::iterator it=local_read_set.begin(); it!=local_read_set.end(); ++it) {
            if(local_write_set.find(it.first.first) != local_write_set.end()){
                it.first.first.lock.lock();
            }
            it.first.second.read_list.erase(it.first.second.read_list.find(t->id));
            if(local_write_set.find(it.first.first) != local_write_set.end()){
                it.first.first.lock.unlock();
            }
        }
        for(map<data_head*, value>::iterator it=local_write_set.begin(); it!=local_write_set.end(); ++it){
            it.first.lock.unlock();
        }
        live_set.erase(t->id);
        delete t;
        global_lock.unlock();
        return 'a';
    }
    
    

}

void garbage_collection(vector<data_head*> data){
    for(auto i : data){
        global_lock.lock();
        int minima = *live_set.begin();
        data_item* cur = i->next;
        data_item* previous = cur;
        while(cur != NULL){
            if(cur->id < minima){
                cur = cur->next;
                if(cur->id < minima){
                    i->next = cur;
                    delete previous;
                    previous = cur;
                }
            } else{
                break;
            }
        }
    }
}